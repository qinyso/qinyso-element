import{_ as n,C as r,c as l,o as s,j as t,ae as p,a,G as i}from"./chunks/framework.BOW-zMUt.js";const y=JSON.parse('{"title":"克隆项目","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),m={name:"index.md"};function h(u,e,d,c,b,g){const o=r("er-button");return s(),l("div",null,[e[2]||(e[2]=t("p",null,"欢迎来到我的 qinyso-element 世界！ layout: home",-1)),e[3]||(e[3]=t("p",null,'hero: name: "qinyso-element" text: "纯新手手搓的 Vue3 组件库" tagline: 代码写得超烂，但按钮会放 "粒子烟花"！求大佬带带我 哭哭 image: src: /logo.png # 放在 docs/.vitepress/public 目录 alt: qinyso-element Logo actions:',-1)),e[4]||(e[4]=t("p",null,[a("theme: brand text: 看按钮演示 link: /components/button theme: alt text: 去 GitHub 笑我代码 link: "),t("a",{href:"https://github.com/qinyso/qinyso-element",target:"_blank",rel:"noreferrer"},"https://github.com/qinyso/qinyso-element")],-1)),e[5]||(e[5]=t("p",null,"features:",-1)),t("p",null,[e[0]||(e[0]=a('title: 我是纯纯新手 details: 写组件库像闯关！按钮的粒子效果改了 800 遍... 但最后做出来啦！ title: 按钮会 "放烟花" details: 点 ')),i(o),e[1]||(e[1]=a(" 能掉粒子！虽然实现时差点把自己绕晕，但效果超酷！ title: 求大佬指导 details: 代码肯定有一堆 bug，欢迎提 issue 骂醒我（轻点儿骂 害怕.jpg） 先看最炫的按钮组件！"))]),e[6]||(e[6]=p('<p>按钮示例 image 本地体验步骤（无需发布到 NPM）</p><ol><li>克隆项目到本地</li></ol><p>git clone <a href="https://github.com/qinyso/qinyso-element.git" target="_blank" rel="noreferrer">https://github.com/qinyso/qinyso-element.git</a> cd qinyso-element 2. 安装依赖 bash pnpm install 3. 进入演示项目目录 bash cd packages/play 4. 启动开发服务器 bash pnpm run dev 5. 访问演示页面 在浏览器中打开：<a href="http://localhost:5173" target="_blank" rel="noreferrer">http://localhost:5173</a> 实际操作示例 以下是完整的命令行操作过程，你可以直接复制粘贴：</p><p>bash</p><h1 id="克隆项目" tabindex="-1">克隆项目 <a class="header-anchor" href="#克隆项目" aria-label="Permalink to &quot;克隆项目&quot;">​</a></h1><p>git clone <a href="https://github.com/qinyso/qinyso-element.git" target="_blank" rel="noreferrer">https://github.com/qinyso/qinyso-element.git</a> cd qinyso-element</p><h1 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h1><p>pnpm install</p><h1 id="进入演示项目" tabindex="-1">进入演示项目 <a class="header-anchor" href="#进入演示项目" aria-label="Permalink to &quot;进入演示项目&quot;">​</a></h1><p>cd packages/play</p><h1 id="启动开发服务器" tabindex="-1">启动开发服务器 <a class="header-anchor" href="#启动开发服务器" aria-label="Permalink to &quot;启动开发服务器&quot;">​</a></h1><p>pnpm run dev</p><p>启动成功后，你将看到类似以下输出：</p><p>plaintext VITE v5.4.19 ready in 622 ms</p><p>➜ Local: <a href="http://localhost:5173/" target="_blank" rel="noreferrer">http://localhost:5173/</a> ➜ Network: use --host to expose ➜ press h + enter to show help</p><p>此时打开浏览器访问 <a href="http://localhost:5173" target="_blank" rel="noreferrer">http://localhost:5173</a>，即可看到 App.vue 中展示的组件效果。 修改组件实时预览 如果你想修改组件代码并实时预览效果，可以：</p><p>在编辑器中打开 packages/button 目录 修改组件源码（如 Button.vue） 保存文件后，浏览器会自动刷新，显示最新效果 我踩过的超蠢坑！ 坑 1：路径写错 最开始我从错误的路径引入组件，卡了 2 小时... 正确做法：确保 packages/play/src/main.ts 中正确引入组件：</p><p>typescript import { createApp } from &#39;vue&#39; import App from &#39;./App.vue&#39; import QinysoElement from &#39;qinyso-element&#39; // 引入组件库 import &#39;qinyso-element/dist/style.css&#39; // 引入样式</p><p>createApp(App) .use(QinysoElement) // 注册组件库 .mount(&#39;#app&#39;)</p><p>坑 2：工作流配置 GitHub Actions 配了好多遍，权限问题真的坑！ 避坑指南：本地开发阶段可以先忽略 CI/CD，专注于组件实现。 求大佬帮忙！ 如果你在使用过程中遇到任何问题，或者有更酷的想法，欢迎提 issue 教我！ 现在就去试试吧～ 要是觉得好玩，给我 GitHub 点个 star 🌟 吧！</p>',20))])}const q=n(m,[["render",h]]);export{y as __pageData,q as default};
